Index: apache-nutch-1.3/src/plugin/protocol-file/src/java/org/apache/nutch/protocol/file/File.java
===================================================================
--- apache-nutch-1.3.orig/src/plugin/protocol-file/src/java/org/apache/nutch/protocol/file/File.java
+++ apache-nutch-1.3/src/plugin/protocol-file/src/java/org/apache/nutch/protocol/file/File.java
@@ -57,6 +57,10 @@ public class File implements Protocol {
 
   private Configuration conf;
 
+  protected boolean check_modified;
+  protected boolean double_file_interval;
+  protected int doubleDefaultInterval; 
+
   // constructor
   public File() {
   }
@@ -79,7 +83,9 @@ public class File implements Protocol {
   
         if (code == 200) {                          // got a good response
           return new ProtocolOutput(response.toContent());              // return it
-  
+       	} else if (code == 304) {
+          return new ProtocolOutput(response.toContent(),
+                       new ProtocolStatus(ProtocolStatus.NOTMODIFIED));
         } else if (code >= 300 && code < 400) {     // handle redirect
           if (redirects == MAX_REDIRECTS)
             throw new FileException("Too many redirects: " + url);
@@ -158,6 +164,11 @@ public class File implements Protocol {
     this.conf = conf;
     this.maxContentLength = conf.getInt("file.content.limit", 64 * 1024);
     this.crawlParents = conf.getBoolean("file.crawl.parent", true);
+    this.check_modified = conf.getBoolean("file.check.modified", true);
+    this.double_file_interval =
+               conf.getBoolean("file.double.file.interval", false);
+    this.doubleDefaultInterval =
+               conf.getInt("db.fetch.interval.default", 0) * 2;
   }
 
   public Configuration getConf() {
Index: apache-nutch-1.3/src/plugin/protocol-file/src/java/org/apache/nutch/protocol/file/FileResponse.java
===================================================================
--- apache-nutch-1.3.orig/src/plugin/protocol-file/src/java/org/apache/nutch/protocol/file/FileResponse.java
+++ apache-nutch-1.3/src/plugin/protocol-file/src/java/org/apache/nutch/protocol/file/FileResponse.java
@@ -21,9 +21,13 @@ package org.apache.nutch.protocol.file;
 import java.net.URL;
 import java.util.Date;
 import java.util.TreeMap;
+import java.util.BitSet;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 
+import org.apache.commons.codec.net.URLCodec;
+import org.apache.commons.lang.StringEscapeUtils;
+
 // Nutch imports
 import org.apache.nutch.crawl.CrawlDatum;
 import org.apache.nutch.protocol.Content;
@@ -73,6 +77,28 @@ public class FileResponse {
   private final File file;
   private Configuration conf;
 
+  private static final BitSet safeUrlChars = new BitSet(256);
+
+  static {
+        // alpha characters
+        for (int i = 'a'; i <= 'z'; i++) {
+            safeUrlChars.set(i);
+        }
+        for (int i = 'A'; i <= 'Z'; i++) {
+            safeUrlChars.set(i);
+        }
+        // numeric characters
+        for (int i = '0'; i <= '9'; i++) {
+            safeUrlChars.set(i);
+        }
+        // special chars
+        safeUrlChars.set('-');
+        safeUrlChars.set('_');
+        safeUrlChars.set('.');
+        safeUrlChars.set('*');
+	safeUrlChars.set('/');
+  }
+
   private MimeUtil MIME;
 
   /** Returns the response code. */
@@ -154,15 +180,19 @@ public class FileResponse {
         this.code = 300;  // http redirect
         return;
       }
-      if (f.lastModified() <= datum.getModifiedTime()) {
+      if (this.file.check_modified &&
+		      f.lastModified() <= datum.getModifiedTime()) {
         this.code = 304;
         this.headers.set("Last-Modified", HttpDateFormat.toString(f.lastModified()));
         return;
       }
+      datum.setModifiedTime(f.lastModified());
 
       if (f.isDirectory()) {
         getDirAsHttpResponse(f);
       } else if (f.isFile()) {
+	if (this.file.double_file_interval)
+	    datum.setFetchInterval(this.file.doubleDefaultInterval);
         getFileAsHttpResponse(f);
       } else {
         this.code = 500; // http Internal Server Error
@@ -247,7 +277,7 @@ public class FileResponse {
 
   // generate html page from dir list
   private byte[] list2html(java.io.File[] list, String path,
-      boolean includeDotDot) {
+      boolean includeDotDot) throws UnsupportedEncodingException {
 
     StringBuffer x = new StringBuffer("<html><head>");
     x.append("<title>Index of " + path + "</title></head>\n");
@@ -263,16 +293,18 @@ public class FileResponse {
     for (int i = 0; i < list.length; i++) {
       f = list[i];
       String name = f.getName();
+      String htmlName = StringEscapeUtils.escapeHtml(name);
+      String urlName = new String(URLCodec.encodeUrl(safeUrlChars, name.getBytes("UTF-8")), "US-ASCII");
       String time = HttpDateFormat.toString(f.lastModified());
       if (f.isDirectory()) {
         // java 1.4.2 api says dir itself and parent dir are not listed
         // so the following is not needed.
         // if (name.equals(".") || name.equals(".."))
         // continue;
-        x.append("<a href='" + name + "/" + "'>" + name + "/</a>\t");
+        x.append("<a href='" + urlName + "/" + "'>" + htmlName + "/</a>\t");
         x.append(time + "\t-\n");
       } else if (f.isFile()) {
-        x.append("<a href='" + name + "'>" + name + "</a>\t");
+        x.append("<a href='" + urlName + "'>" + htmlName + "</a>\t");
         x.append(time + "\t" + f.length() + "\n");
       } else {
         // ignore any other
